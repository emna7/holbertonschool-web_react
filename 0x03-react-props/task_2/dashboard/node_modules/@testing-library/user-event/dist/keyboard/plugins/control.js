"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keydownBehavior = void 0;

var _utils = require("../../utils");

var _shared = require("../shared");

var _calculateNewDeleteValue = require("./control/calculateNewDeleteValue");

/**
 * This file should contain behavior for arrow keys as described here:
 * https://w3c.github.io/uievents-code/#key-controlpad-section
 */
const keydownBehavior = [{
  matches: (keyDef, element) => (keyDef.key === 'Home' || keyDef.key === 'End') && ((0, _utils.isInstanceOfElement)(element, 'HTMLInputElement') || (0, _utils.isInstanceOfElement)(element, 'HTMLTextAreaElement') || (0, _utils.isContentEditable)(element)),
  handle: (keyDef, element) => {
    // This could probably been improved by collapsing a selection range
    if (keyDef.key === 'Home') {
      (0, _utils.setSelectionRangeIfNecessary)(element, 0, 0);
    } else {
      var _getValue$length, _getValue;

      const newPos = (_getValue$length = (_getValue = (0, _utils.getValue)(element)) == null ? void 0 : _getValue.length) != null ? _getValue$length :
      /* istanbul ignore next */
      0;
      (0, _utils.setSelectionRangeIfNecessary)(element, newPos, newPos);
    }
  }
}, {
  matches: keyDef => keyDef.key === 'Delete',
  handle: (keDef, element) => {
    (0, _shared.fireInputEventIfNeeded)({ ...(0, _calculateNewDeleteValue.calculateNewDeleteValue)(element),
      eventOverrides: {
        inputType: 'deleteContentForward'
      },
      currentElement: () => element
    });
  }
}];
exports.keydownBehavior = keydownBehavior;